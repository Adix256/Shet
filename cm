```#!/bin/bash

# Find all C source files and header files in the current directory
SRC_FILES=$(find . -type f -name "*.c")
HEADER_FILES=$(find . -type f -name "*.h")

# Combine all source and header files into one list
ALL_FILES="${SRC_FILES} ${HEADER_FILES}"

# Get the project name from the current directory
PROJECT_NAME=$(basename "$PWD")

# Create or update the CMakeLists.txt file
CMAKE_FILE="CMakeLists.txt"

# If CMakeLists.txt exists, we update it; otherwise, we create it
if [ -f "$CMAKE_FILE" ]; then
  echo "Updating existing CMakeLists.txt"
  # Backup the old CMakeLists.txt
  cp "$CMAKE_FILE" "${CMAKE_FILE}.bak"
  
  # Remove the previous 'add_executable' line to avoid duplicates
  sed -i '/add_executable/d' "$CMAKE_FILE"
else
  echo "Creating new CMakeLists.txt"
  # Start a fresh CMakeLists.txt file
  echo "cmake_minimum_required(VERSION 3.10)" > "$CMAKE_FILE"
  echo "project(${PROJECT_NAME})" >> "$CMAKE_FILE"
  echo "set(CMAKE_C_STANDARD 11)" >> "$CMAKE_FILE"
fi

# Append the new 'add_executable' line
echo "add_executable(${PROJECT_NAME} ${ALL_FILES})" >> "$CMAKE_FILE"

echo "CMakeLists.txt has been updated with the following files:"
echo "$ALL_FILES"

# Check if the 'build' directory exists; if not, create it
if [ ! -d "build" ]; then
  echo "No 'build/' directory found. Creating it..."
  mkdir build
else
  echo "'build/' directory already exists."
fi

# Run cmake with Ninja generator to create build files in the build directory
cd build || exit
cmake -G Ninja ..
echo "Ninja build files have been generated in './build'. Now, run 'ninja' to build the project."```
